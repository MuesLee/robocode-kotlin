plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
}

group = 'de.mueslee'
version = '1.0'

ext {
    roboJarFileName = "${robotClass}"
    buildBattleDir = "${rootDir}/config/battles/"
    buildBattleFile = buildBattleDir + battleFile
    robocodeBattlesDir = "${robocodeHome}/battles/"
    robocodeBattleFile = robocodeBattlesDir + battleFile
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation 'org.assertj:assertj-core:3.20.2'
    testImplementation 'org.awaitility:awaitility-kotlin:4.1.0'

    implementation 'net.sf.robocode:robocode.core:1.9.4.2'
    implementation 'net.sf.robocode:robocode.api:1.9.4.2'
    implementation 'net.sf.robocode:robocode.repository:1.9.4.2'
    implementation 'net.sf.robocode:robocode.host:1.9.4.2'
    implementation 'net.sf.robocode:robocode.battle:1.9.4.2'
    implementation 'net.sf.robocode:robocode.samples:1.9.4.2'
}

task roboJar(type: Jar) {
    group = 'robocode'

    archivesBaseName = roboJarFileName
    duplicatesStrategy = 'EXCLUDE'

    manifest {
        attributes "robots": "${robotClass}"
    }

    from {
        sourceSets.getByName("main").output
    }
}

task registerRobo {
    dependsOn roboJar
    group = 'robocode'

    doLast {
        copy {
            from fileTree("${rootDir}/build/libs/").include("**/**/*.jar").files
            into "${robocodeHome}/robots/"
            eachFile { details ->
                println "Copied ${details}"
            }
        }
    }
}

task generateBattleFile {
    dependsOn registerRobo
    group = 'robocode'

    def battleRobots = "${robotClassEnemy}, ${robotClass} ${robotVersion}"

    doFirst {
        ant.replace(file: buildBattleFile, token: '$selectedRobots$', value: battleRobots)
    }

    doLast {
        copy {
            from buildBattleFile
            into robocodeBattlesDir
            eachFile { details ->
                println "Copied ${details}"
            }
        }
    }
}

task cleanup {
    group = 'robocode'

    doFirst {
        def robotsPath = "${robocodeHome}/robots/"
        delete fileTree(robotsPath).matching {
            include "**/${roboJarFileName}*.jar"
            include "**/robot.database"
        }
        delete fileTree(robocodeBattlesDir).matching {
            include "**/${battleFile}"
        }
    }
}
tasks.clean.dependsOn(cleanup)

task startRobocode {
    dependsOn cleanup, roboJar, registerRobo, generateBattleFile
    group = 'robocode'

    doLast {
        exec {
            commandLine 'java',
                    "-Xmx512M",
                    "-Ddebug=true",
                    "-DWORKINGDIRECTORY=${robocodeHome}",
                    "-cp", "${robocodeHome}/libs/*", "robocode.Robocode",
                    '-battle', robocodeBattleFile
        }
    }
}


repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '11'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '11'
}
